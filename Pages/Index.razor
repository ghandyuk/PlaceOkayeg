@using Microsoft.AspNetCore.WebUtilities

@page "/"

<PageTitle>Okayeg</PageTitle>

<div style="margin-top: 30px;" class="flex-col justify-content-center align-items-center">
    <div class="flex-col align-items-center flex-grow" style="margin-bottom: 14px;">
        <div style="margin-bottom: 14px;">
            <label>x-offset</label>
            <input type="number" min="0" value="@OffsetX"
                @onchange="EventUtil.AsNonRenderingEventHandler<ChangeEventArgs>(OffsetXChanged)">
            <label>y-offset</label>
            <input type="number" min="0" value="@OffsetY"
                @onchange="EventUtil.AsNonRenderingEventHandler<ChangeEventArgs>(OffsetYChanged)">
        </div>
        <div class="flex" style="width: 100%;">
            <input class="flex-grow" type="text" value="@ImageUrl"
                @onchange="EventUtil.AsNonRenderingEventHandler<ChangeEventArgs>(LoadLinkTextChanged)">
            <button @onclick="@EventUtil.AsNonRenderingEventHandler(() => LoadImage(ImageUrl))">Load
                Image</button>
        </div>
    </div>
    @if (!isLoading)
    {
        <Place.Components.TileContainer Width=width @key="KeyGen.Generate">
            @for (int i = 0; i < height; i++)
            {
                @for (int j = 0; j < width; j++)
                {
                    var y = i + OffsetY;
                    var x = j + OffsetX;
                    <Place.Components.Tile @key="KeyGen.Generate" X=x Y=y BackgroundColour="@pixels[j,i].BackgroundColour"
            Colour="@pixels[j,i].Colour" />
                }
            }
        </Place.Components.TileContainer>

        <div>
            <p> Width: @width px</p>
            <p> Height: @height px </p>
        </div>
    }
    else
    {
        <div>
            <p>Provide a URL to load image and set offsets for your image</p>
            <p>Top left is origin/reference point (0,0) for the offset</p>
            <p>e.g. try https://i.imgur.com/9zWkwCR.png</p>
        </div>
    }
</div>

@code {
    private class ColourBackgroundColour
    {
        public string Colour { get; set; }
        public string BackgroundColour { get; set; }
    }

    [Inject] public HttpClient HttpClient { get; set; }
    [Inject] public IKeyGenerator KeyGen { get; set; }
    [Inject] public NavigationManager NavManager { get; set; }
    [Inject] public ILogger<Index> Logger { get; set; }
    [Parameter] public int OffsetX { get; set; }
    [Parameter] public int OffsetY { get; set; }
    [Parameter] public string ImageUrl { get; set; }
    private ColourBackgroundColour[,] pixels = null!;
    private bool isLoading = true;
    private int width;
    private int height;

    private void OffsetXChanged(ChangeEventArgs args)
    {
        if (int.TryParse(args.Value.ToString(), out var offsetX))
        {
            OffsetX = offsetX;
        }
    }

    private void OffsetYChanged(ChangeEventArgs args)
    {
        if (int.TryParse(args.Value.ToString(), out var offsetY))
        {
            OffsetY = offsetY;
        }
    }

    private void LoadLinkTextChanged(ChangeEventArgs args) => ImageUrl = args.Value.ToString();

    private async Task LoadImage(string url)
    {
        isLoading = true;
        try
        {
            using (var stream = await HttpClient.GetStreamAsync(url))
            using (var memoryStream = new MemoryStream())
            {
                await stream.CopyToAsync(memoryStream);
                memoryStream.Seek(0, SeekOrigin.Begin);

                using (var image = Image.Load<Rgba32>(memoryStream, new SixLabors.ImageSharp.Formats.Png.PngDecoder()))
                {
                    width = image.Width;
                    height = image.Height;
                    pixels = new ColourBackgroundColour[width, height];

                    image.ProcessPixelRows(accessor =>
                    {
                        for (int i = 0; i < accessor.Height; i++)
                        {
                            for (int j = 0; j < accessor.Width; j++)
                            {
                                pixels[j, i] = new ColourBackgroundColour()
                                {
                                    BackgroundColour = $"#{image[j, i].ToHex()}",
                                    Colour = $"#{ColourUtil.CalculateConstrastColour(image[j, i]).ToHex()}",
                                };
                            }
                        }
                    });
                }
            }
            isLoading = false;
            StateHasChanged();
        }
        catch (Exception e)
        {
            Logger.LogError(e.Message);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue(nameof(OffsetX), out var sOffsetX))
        {
            OffsetX = int.TryParse(sOffsetX.FirstOrDefault(), out var offsetX) ? offsetX : 0;
        }

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue(nameof(OffsetY), out var sOffsetY))
        {
            OffsetY = int.TryParse(sOffsetY.FirstOrDefault(), out var offsetY) ? offsetY : 0;
        }

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue(nameof(ImageUrl), out var imageUrl))
        {
            if (!string.IsNullOrWhiteSpace(imageUrl))
            {
                ImageUrl = imageUrl;
                await LoadImage(ImageUrl);
            }
        }
    }
}
